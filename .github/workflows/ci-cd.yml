name: CI/CD Pipeline

on:
  push:
    branches: [main, feature/data-upload-flow]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rapiddatachat_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate environment variables
        run: node scripts/validate-env.js
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rapiddatachat_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
          STORAGE_PROVIDER: local
          PROJECT_STORAGE_PATH: ./projects
          MAX_PROJECTS_PER_USER: 50
          SCHEMA_VALIDATION_LEVEL: strict
          MAX_SCHEMA_COLUMNS: 100
          COLUMN_MAPPING_STRATEGY: fuzzy
          ENABLE_SCHEMA_EVOLUTION: true
          NORMALIZATION_BATCH_SIZE: 1000
          ENABLE_DATA_VALIDATION: true

      - name: Run Prisma migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rapiddatachat_test

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rapiddatachat_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
          STORAGE_PROVIDER: local
          PROJECT_STORAGE_PATH: ./projects
          MAX_PROJECTS_PER_USER: 50
          SCHEMA_VALIDATION_LEVEL: strict
          MAX_SCHEMA_COLUMNS: 100
          COLUMN_MAPPING_STRATEGY: fuzzy
          ENABLE_SCHEMA_EVOLUTION: true
          NORMALIZATION_BATCH_SIZE: 1000
          ENABLE_DATA_VALIDATION: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rapiddatachat_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
          STORAGE_PROVIDER: local
          PROJECT_STORAGE_PATH: ./projects
          MAX_PROJECTS_PER_USER: 50
          SCHEMA_VALIDATION_LEVEL: strict
          MAX_SCHEMA_COLUMNS: 100
          COLUMN_MAPPING_STRATEGY: fuzzy
          ENABLE_SCHEMA_EVOLUTION: true
          NORMALIZATION_BATCH_SIZE: 1000
          ENABLE_DATA_VALIDATION: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: .next

  deploy-preview:
    name: Deploy to Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .next

      - name: Deploy to Vercel (Preview)
        run: vercel --token ${VERCEL_TOKEN} --confirm
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .next

      - name: Deploy to Vercel (Production)
        run: vercel --token ${VERCEL_TOKEN} --prod --confirm
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
