generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("RAW_DATABASE_DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  resetToken        String?   @map("reset_token")
  resetTokenExpires DateTime? @map("reset_token_expires")

  @@map("users")
}

model Project {
  id                String              @id @default(uuid())
  name              String
  description       String?
  userId            String              @map("user_id")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  files             File[]
  globalSchemas     GlobalSchema[]
  importJobs        ImportJob[]
  projectSchemaMeta ProjectSchemaMeta[]

  @@index([userId], map: "idx_projects_user")
  @@map("projects")
}

model File {
  id                    String                @id @default(uuid())
  userId                String                @map("user_id")
  filename              String
  uploadedAt            DateTime              @default(now()) @map("uploaded_at")
  ingestedAt            DateTime?             @map("ingested_at")
  sizeBytes             Int                   @map("size_bytes")
  format                String?
  status                String                @default("pending")
  metadata              Json?
  filepath              String?
  activationProgress    Int?                  @map("activation_progress")
  activationStartedAt   DateTime?             @map("activation_started_at")
  activationCompletedAt DateTime?             @map("activation_completed_at")
  activationError       String?               @map("activation_error")
  projectId             String?               @map("project_id")
  columnMappings        ColumnMapping[]
  columnMerges          ColumnMerge[]
  deadLetterQueueItems  DeadLetterQueueItem[]
  fileData              FileData[]
  fileErrors            FileError[]
  project               Project?              @relation(fields: [projectId], references: [id])
  sources               Source[]

  @@index([userId], map: "idx_files_user")
  @@index([projectId], map: "idx_files_project")
  @@map("files")
}

model GlobalSchema {
  id             String          @id @default(uuid())
  projectId      String          @map("project_id")
  name           String
  description    String?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  columnMappings ColumnMapping[]
  project        Project         @relation(fields: [projectId], references: [id])
  columns        SchemaColumn[]

  @@index([projectId], map: "idx_global_schemas_project")
  @@map("global_schemas")
}

model SchemaColumn {
  id             String          @id @default(uuid())
  globalSchemaId String          @map("global_schema_id")
  name           String
  description    String?
  dataType       String          @map("data_type")
  isRequired     Boolean         @default(false) @map("is_required")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  columnMappings ColumnMapping[]
  globalSchema   GlobalSchema    @relation(fields: [globalSchemaId], references: [id])

  @@unique([globalSchemaId, name])
  @@index([globalSchemaId], map: "idx_schema_columns_global_schema")
  @@map("schema_columns")
}

model ColumnMapping {
  id                 String       @id @default(uuid())
  fileId             String       @map("file_id")
  globalSchemaId     String       @map("global_schema_id")
  schemaColumnId     String       @map("schema_column_id")
  fileColumn         String       @map("file_column")
  transformationRule String?      @map("transformation_rule")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  file               File         @relation(fields: [fileId], references: [id])
  globalSchema       GlobalSchema @relation(fields: [globalSchemaId], references: [id])
  schemaColumn       SchemaColumn @relation(fields: [schemaColumnId], references: [id])

  @@unique([fileId, schemaColumnId])
  @@index([fileId], map: "idx_column_mappings_file")
  @@index([globalSchemaId], map: "idx_column_mappings_global_schema")
  @@index([schemaColumnId], map: "idx_column_mappings_schema_column")
  @@map("column_mappings")
}

model Source {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  fileId    String   @map("file_id")
  file      File     @relation(fields: [fileId], references: [id])

  @@map("sources")
}

model Query {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  queryText String   @map("query_text")
  createdAt DateTime @default(now()) @map("created_at")
  status    String
  error     String?
  results   Result[]

  @@index([userId], map: "idx_queries_user")
  @@index([createdAt], map: "idx_queries_created_at")
  @@map("queries")
}

model Result {
  id         String   @id @default(uuid())
  queryId    String   @map("query_id")
  resultData Json?    @map("result_data")
  createdAt  DateTime @default(now()) @map("created_at")
  query      Query    @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@map("results")
}

model FileError {
  id        String   @id @default(uuid())
  fileId    String   @map("file_id")
  errorType String   @map("error_type")
  severity  String
  message   String
  details   String?
  timestamp DateTime
  file      File     @relation(fields: [fileId], references: [id])

  @@map("file_errors")
}

model DeadLetterQueueItem {
  id          String    @id @default(uuid())
  fileId      String    @map("file_id")
  operation   String
  payload     String
  error       String
  timestamp   DateTime
  retryCount  Int       @default(0) @map("retry_count")
  lastRetryAt DateTime? @map("last_retry_at")
  file        File      @relation(fields: [fileId], references: [id])

  @@map("dead_letter_queue")
}

model FileData {
  id         String   @id @default(uuid())
  fileId     String   @map("file_id")
  ingestedAt DateTime @default(now()) @map("ingested_at")
  data       Json
  file       File     @relation(fields: [fileId], references: [id])

  @@index([fileId], map: "idx_file_data_file")
  @@map("file_data")
}

model ColumnMerge {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  fileId     String   @map("file_id")
  mergeName  String   @map("merge_name")
  columnList String[] @map("column_list")
  delimiter  String   @default(" ")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  file       File     @relation(fields: [fileId], references: [id])

  @@unique([userId, fileId, mergeName])
  @@index([userId], map: "idx_column_merges_user")
  @@index([fileId], map: "idx_column_merges_file")
  @@map("column_merges")
}

model project_files {
  project_id String
  file_id    String

  @@id([project_id, file_id])
}

model ImportJob {
  id            String          @id @default(uuid())
  projectId     String          @map("project_id")
  userId        String          @map("user_id")
  filename      String
  blobUrl       String          @map("blob_url")
  status        ImportJobStatus @default(QUEUED)
  rowsProcessed Int             @default(0) @map("rows_processed")
  totalRows     Int?            @map("total_rows")
  errorMessage  String?         @map("error_message")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  startedAt     DateTime?       @map("started_at")
  completedAt   DateTime?       @map("completed_at")
  blobDeletedAt DateTime?       @map("blob_deleted_at")
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "idx_import_jobs_project")
  @@index([userId], map: "idx_import_jobs_user")
  @@index([status], map: "idx_import_jobs_status")
  @@map("import_jobs")
}

model ProjectSchemaMeta {
  id         String   @id @default(uuid())
  projectId  String   @map("project_id")
  tableName  String   @map("table_name")
  columnName String   @map("column_name")
  dataType   String   @map("data_type")
  isNullable Boolean  @default(true) @map("is_nullable")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, tableName, columnName])
  @@index([projectId], map: "idx_project_schema_meta_project")
  @@map("project_schema_meta")
}

enum ImportJobStatus {
  QUEUED
  PROCESSING
  READY
  ERROR
}
